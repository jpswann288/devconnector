name: CI/CD Pipeline

on:
  push:
    branches: ["master"]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Source
        uses: actions/checkout@v3

      - name: Login to Docker Hub
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
        run: echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin

      - name: Build and Push Backend Docker Image
        run: |
          docker build -t jpswann0208/my-backend:latest -f ./Dockerfile.backend ./
          docker push jpswann0208/my-backend:latest

      - name: Build and Push Frontend Docker Image
        run: |
          docker build -t jpswann0208/my-frontend:latest -f ./client/Dockerfile.frontend ./client
          docker push jpswann0208/my-frontend:latest

  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Create .env File
        run: |
          echo "MONGO_URI=${{ secrets.MONGO_URI }}" > .env
          echo "GH_CLIENT_ID=${{ secrets.GH_CLIENT_ID }}" >> .env
          echo "GH_SECRET=${{ secrets.GH_SECRET }}" >> .env
          echo "JWT_SECRET=${{ secrets.JWT_SECRET }}" >> .env
          echo "PORT=8000" >> .env

      - name: Setup SSH
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: 22
          script: |
            cd devconnector
            sudo docker-compose down
            sudo IMAGE_TAG=$((${{github.run_number }}+1)) docker-compose up -d --scale frontend=2 --scale backend=2 --no-recreate
            sudo docker rm -f $(sudo docker ps -q | xargs sudo docker inspect --format='{{.Name}}' | grep frontend | tail -n 1) 
            sudo docker rm -f $(sudo docker ps -q | xargs sudo docker inspect --format='{{.Name}}' | grep backend | tail -n 1)
            sudo docker exec $(sudo docker ps -q | xargs sudo docker inspect --format='{{.Name}}' | grep nginx) nginx -s reload
